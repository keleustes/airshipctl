// Code generated by pluginator on NetworkingCRDRegister; DO NOT EDIT.
package register

import (
	"istio.io/istio/pilot/pkg/config/kube/crd"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/kustomize/api/resmap"
)

// plugin loads the Network CRD scheme into kustomize
type NetworkingCRDRegisterPlugin struct {
}

//nolint: golint

func (p *NetworkingCRDRegisterPlugin) Config(
	_ *resmap.PluginHelpers, _ []byte) (err error) {

	// SchemeGroupVersion is group version used to register these objects
	apiVersion := schema.GroupVersion{Group: "networking.istio.io", Version: "v1alpha3"}
	schemeBuilder := runtime.NewSchemeBuilder(
		func(scheme *runtime.Scheme) error {
			for _, kind := range crd.KnownTypes {
				scheme.AddKnownTypes(apiVersion, kind.Object, kind.Collection)
			}
			meta_v1.AddToGroupVersion(scheme, apiVersion)
			return nil
		})

	// Register the types with the Scheme so the components can map objects to GroupVersionKinds and back
	return schemeBuilder.AddToScheme(scheme.Scheme)
}

func (p *NetworkingCRDRegisterPlugin) Transform(m resmap.ResMap) error {
	return nil
}

func NewNetworkingCRDRegisterPlugin() resmap.TransformerPlugin {
	return &NetworkingCRDRegisterPlugin{}
}
